name: 构建二进制包并推送Docker镜像到Docker Hub

permissions: write-all        

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 检测项目类型
        id: detect
        run: |
          if [ -f "go.mod" ] || [ -f "main.go" ] || [ -f "*.go" ]; then
            echo "type=go" >> $GITHUB_OUTPUT
            echo "::notice ::检测到Go项目"
          elif [ -f "package.json" ]; then
            echo "type=node" >> $GITHUB_OUTPUT
            echo "::notice ::检测到Node.js项目"
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
            echo "type=python" >> $GITHUB_OUTPUT
            echo "::notice ::检测到Python项目"
          elif [ -f "Cargo.toml" ]; then
            echo "type=rust" >> $GITHUB_OUTPUT
            echo "::notice ::检测到Rust项目"
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "type=java" >> $GITHUB_OUTPUT
            echo "::notice ::检测到Java项目"
          else
            echo "type=unknown" >> $GITHUB_OUTPUT
            echo "::notice ::未能检测到项目类型，将使用默认Dockerfile"
          fi

      - name: 设置Go环境
        if: steps.detect.outputs.type == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: 设置Node.js环境
        if: steps.detect.outputs.type == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 设置Python环境
        if: steps.detect.outputs.type == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 设置Rust环境
        if: steps.detect.outputs.type == 'rust'
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: 编译二进制文件
        run: |
          mkdir -p dist
          
          case "${{ steps.detect.outputs.type }}" in
            go)
              # 初始化go.mod（如果不存在）
              if [ ! -f "go.mod" ]; then
                go mod init $(basename $PWD)
                go mod tidy
              fi
              
              # 编译Go二进制
              echo "编译Go二进制文件..."
              CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -extldflags '-static'" -o dist/app-linux-amd64 .
              CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -extldflags '-static'" -o dist/app-linux-arm64 .
              ;;
              
            node)
              # 使用pkg打包Node.js应用
              echo "打包Node.js应用..."
              npm install
              npm install -g pkg
              pkg . --targets node18-linux-x64 --output dist/app-linux-amd64
              pkg . --targets node18-linux-arm64 --output dist/app-linux-arm64
              ;;
              
            python)
              # 使用PyInstaller打包Python应用
              echo "打包Python应用..."
              pip install pyinstaller
              pip install -r requirements.txt || true
              
              # 查找主入口文件
              MAIN_FILE=$(find . -name "main.py" -o -name "app.py" -o -name "__main__.py" | head -1)
              if [ -z "$MAIN_FILE" ]; then
                MAIN_FILE=$(find . -name "*.py" | head -1)
              fi
              
              pyinstaller --onefile --clean --strip --name app-linux-amd64 $MAIN_FILE
              cp dist/app-linux-amd64 dist/app-linux-arm64  # Python二进制通常是跨架构的
              ;;
              
            rust)
              # 编译Rust二进制
              echo "编译Rust二进制文件..."
              rustup target add x86_64-unknown-linux-gnu
              rustup target add aarch64-unknown-linux-gnu
              cargo build --release --target x86_64-unknown-linux-gnu
              cargo build --release --target aarch64-unknown-linux-gnu
              cp target/x86_64-unknown-linux-gnu/release/* dist/app-linux-amd64 2>/dev/null || true
              cp target/aarch64-unknown-linux-gnu/release/* dist/app-linux-arm64 2>/dev/null || true
              ;;
              
            java)
              # 编译Java应用
              echo "编译Java应用..."
              if [ -f "pom.xml" ]; then
                mvn clean package
                find target -name "*.jar" -exec cp {} dist/app.jar \;
              elif [ -f "build.gradle" ]; then
                ./gradlew build
                find build/libs -name "*.jar" -exec cp {} dist/app.jar \;
              fi
              ;;
              
            *)
              # 如果无法识别项目类型，尝试查找可执行文件
              echo "未识别的项目类型，查找现有可执行文件..."
              find . -type f -executable -not -path "./.git/*" -exec cp {} dist/ \; || true
              
              # 如果没有找到可执行文件，创建一个占位符
              if [ -z "$(ls -A dist)" ]; then
                echo "#!/bin/sh" > dist/app-linux-amd64
                echo "echo 'No executable found'" >> dist/app-linux-amd64
                chmod +x dist/app-linux-amd64
                cp dist/app-linux-amd64 dist/app-linux-arm64
              fi
              ;;
          esac
          
          # 尝试使用UPX压缩（如果可用）
          if command -v upx >/dev/null 2>&1; then
            upx --best --lzma dist/* || true
          else
            sudo apt-get update && sudo apt-get install -y upx || true
            upx --best --lzma dist/* || true
          fi
          
          # 确保文件可执行
          chmod +x dist/* || true
          
          # 列出生成的文件
          echo "生成的二进制文件："
          ls -la dist/

      - name: 创建精简Dockerfile
        run: |
          # 根据项目类型创建不同的Dockerfile
          case "${{ steps.detect.outputs.type }}" in
            java)
              cat > Dockerfile.minimal << 'EOF'
          FROM openjdk:17-alpine
          RUN adduser -D -H -u 1000 appuser
          WORKDIR /app
          COPY dist/app.jar /app/app.jar
          USER appuser
          EXPOSE 8080
          ENTRYPOINT ["java", "-jar", "/app/app.jar"]
          EOF
              ;;
            *)
              cat > Dockerfile.minimal << 'EOF'
          FROM --platform=$TARGETPLATFORM alpine:latest AS runtime
          RUN apk add --no-cache ca-certificates tzdata && \
              adduser -D -H -u 1000 appuser
          WORKDIR /app
          ARG TARGETPLATFORM
          ARG TARGETARCH
          # 尝试多种文件名模式
          COPY dist/app-linux-${TARGETARCH}* /app/app || \
          COPY dist/app-linux-amd64 /app/app || \
          COPY dist/app /app/app || \
          COPY dist/* /app/
          RUN chmod +x /app/app || true
          USER appuser
          EXPOSE 8080
          ENTRYPOINT ["/app/app"]
          EOF
              ;;
          esac

      - name: 设置仓库名称
        id: repo
        run: |
          # 优先级：Secrets > 环境变量 > GitHub仓库名
          if [ -n "${{ secrets.CUSTOM_REPO_NAME }}" ]; then
            REPO_NAME="${{ secrets.CUSTOM_REPO_NAME }}"
            echo "::notice ::使用Secrets中的自定义仓库名"
          elif [ -n "${{ vars.CUSTOM_REPO_NAME }}" ]; then
            REPO_NAME="${{ vars.CUSTOM_REPO_NAME }}"
            echo "::notice ::使用Variables中的自定义仓库名"
          else
            REPO_NAME="${{ github.event.repository.name }}"
            echo "::notice ::使用GitHub仓库名"
          fi
          
          # 转换为小写并验证格式
          REPO_NAME=$(echo "${REPO_NAME}" | tr '[:upper:]' '[:lower:]')
          
          # 验证仓库名格式（Docker Hub要求）
          if ! echo "${REPO_NAME}" | grep -qE '^[a-z0-9][a-z0-9_.-]{0,254}$'; then
            echo "::error ::仓库名格式无效: ${REPO_NAME}"
            exit 1
          fi
          
          echo "name=${REPO_NAME}" >> $GITHUB_OUTPUT
          echo "::notice ::最终使用的仓库名: ${REPO_NAME}"

      - name: 设置Docker元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo.outputs.name }}
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}},enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD-HHmmss'}},enable={{is_default_branch}}
            type=sha,prefix={{branch}}-,enable={{is_default_branch}}
            type=sha,format=short
            type=raw,value=stable,enable=${{ startsWith(github.ref, 'refs/tags/v') }}

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录到Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 构建并推送Docker镜像
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.minimal
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}

      - name: 创建并上传二进制发布包
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          body: |
            ## 发布说明
            
            ### Docker镜像
            ```bash
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo.outputs.name }}:${{ github.ref_name }}
            ```
            
            ### 二进制文件
            请根据您的系统架构下载对应的二进制文件。

      - name: 更新Docker Hub描述
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peter-evans/dockerhub-description@v3
        continue-on-error: true
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo.outputs.name }}
          readme-filepath: ./README.md
          short-description: ${{ github.event.repository.description }}

      - name: 输出镜像信息
        if: github.event_name != 'pull_request'
        run: |
          echo "### 🐳 Docker镜像已推送" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**仓库**: \`${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**项目类型**: ${{ steps.detect.outputs.type }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**镜像特点**:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 仅包含编译后的二进制文件" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 基于最小化镜像" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 使用非root用户运行" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 支持多架构 (amd64/arm64)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**标签**:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
